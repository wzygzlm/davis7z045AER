-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity EVRawStreamToXYTSStream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    eventFIFOIn_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    eventFIFOIn_V_empty_n : IN STD_LOGIC;
    eventFIFOIn_V_read : OUT STD_LOGIC;
    xStreamOut_V_V_TREADY : IN STD_LOGIC;
    yStreamOut_V_V_TREADY : IN STD_LOGIC;
    tsStreamOut_V_V_TREADY : IN STD_LOGIC;
    xStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    xStreamOut_V_V_TVALID : OUT STD_LOGIC;
    yStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    yStreamOut_V_V_TVALID : OUT STD_LOGIC;
    tsStreamOut_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    tsStreamOut_V_V_TVALID : OUT STD_LOGIC );
end;


architecture behav of EVRawStreamToXYTSStream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "EVRawStreamToXYTSStream,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.414500,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=133,HLS_SYN_LUT=197}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal xStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal tmp_reg_168 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_176 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op17_write_state2 : BOOLEAN;
    signal yStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal ap_predicate_op20_write_state2 : BOOLEAN;
    signal tsStreamOut_V_V_1_ack_in : STD_LOGIC;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal tmp_reg_168_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_172_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_176_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op35_write_state3 : BOOLEAN;
    signal ap_predicate_op38_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal xStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal xStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal xStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal xStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal xStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal xStreamOut_V_V_1_sel : STD_LOGIC;
    signal xStreamOut_V_V_1_load_A : STD_LOGIC;
    signal xStreamOut_V_V_1_load_B : STD_LOGIC;
    signal xStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal xStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal yStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal yStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal yStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal yStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal yStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal yStreamOut_V_V_1_sel : STD_LOGIC;
    signal yStreamOut_V_V_1_load_A : STD_LOGIC;
    signal yStreamOut_V_V_1_load_B : STD_LOGIC;
    signal yStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal yStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal tsStreamOut_V_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal tsStreamOut_V_V_1_vld_in : STD_LOGIC;
    signal tsStreamOut_V_V_1_vld_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_ack_out : STD_LOGIC;
    signal tsStreamOut_V_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal tsStreamOut_V_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal tsStreamOut_V_V_1_sel_rd : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel_wr : STD_LOGIC := '0';
    signal tsStreamOut_V_V_1_sel : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_A : STD_LOGIC;
    signal tsStreamOut_V_V_1_load_B : STD_LOGIC;
    signal tsStreamOut_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal tsStreamOut_V_V_1_state_cmp_full : STD_LOGIC;
    signal eventFIFOIn_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal xStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal yStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal tsStreamOut_V_V_TDATA_blk_n : STD_LOGIC;
    signal data_V_reg_161 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_87_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_140_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_1_fu_148_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_156_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_Result_8_fu_95_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Result_5_cast_fu_105_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_0109_0_off_fu_115_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_121_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_5_fu_137_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_145_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_153_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_rd <= not(tsStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((tsStreamOut_V_V_1_ack_in = ap_const_logic_1) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        tsStreamOut_V_V_1_sel_wr <= not(tsStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    tsStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                tsStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((tsStreamOut_V_V_1_vld_in = ap_const_logic_0) and (tsStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((tsStreamOut_V_V_1_ack_out = ap_const_logic_0) and (tsStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (tsStreamOut_V_V_1_state = ap_const_lv2_3)) or ((tsStreamOut_V_V_1_ack_out = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_1)) or ((tsStreamOut_V_V_1_vld_in = ap_const_logic_1) and (tsStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    tsStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_rd <= not(xStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((xStreamOut_V_V_1_ack_in = ap_const_logic_1) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        xStreamOut_V_V_1_sel_wr <= not(xStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    xStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                xStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_2)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((xStreamOut_V_V_1_vld_in = ap_const_logic_0) and (xStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((xStreamOut_V_V_1_ack_out = ap_const_logic_0) and (xStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (xStreamOut_V_V_1_state = ap_const_lv2_3)) or ((xStreamOut_V_V_1_ack_out = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_1)) or ((xStreamOut_V_V_1_vld_in = ap_const_logic_1) and (xStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    xStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    xStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_vld_out = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_rd <= not(yStreamOut_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((yStreamOut_V_V_1_ack_in = ap_const_logic_1) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) then 
                                        yStreamOut_V_V_1_sel_wr <= not(yStreamOut_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    yStreamOut_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                yStreamOut_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_2)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                elsif ((((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_3)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((yStreamOut_V_V_1_vld_in = ap_const_logic_0) and (yStreamOut_V_V_1_ack_out = ap_const_logic_1))) and not(((yStreamOut_V_V_1_ack_out = ap_const_logic_0) and (yStreamOut_V_V_1_vld_in = ap_const_logic_1))) and (yStreamOut_V_V_1_state = ap_const_lv2_3)) or ((yStreamOut_V_V_1_ack_out = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_1)) or ((yStreamOut_V_V_1_vld_in = ap_const_logic_1) and (yStreamOut_V_V_1_state = ap_const_lv2_2)))) then 
                    yStreamOut_V_V_1_state <= ap_const_lv2_3;
                else 
                    yStreamOut_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_V_reg_161 <= eventFIFOIn_V_dout;
                icmp_reg_176_pp0_iter1_reg <= icmp_reg_176;
                tmp_2_reg_172_pp0_iter1_reg <= tmp_2_reg_172;
                tmp_reg_168 <= eventFIFOIn_V_dout(15 downto 15);
                tmp_reg_168_pp0_iter1_reg <= tmp_reg_168;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_109_p2 = ap_const_lv1_0) and (tmp_fu_87_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_reg_176 <= icmp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_87_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_2_reg_172 <= tmp_2_fu_109_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_A <= p_Result_s_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((tsStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                tsStreamOut_V_V_1_payload_B <= p_Result_s_fu_156_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_A <= p_Result_2_fu_140_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((xStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                xStreamOut_V_V_1_payload_B <= p_Result_2_fu_140_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_A = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_A <= p_Result_1_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((yStreamOut_V_V_1_load_B = ap_const_logic_1)) then
                yStreamOut_V_V_1_payload_B <= p_Result_1_fu_148_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter2, eventFIFOIn_V_empty_n, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (eventFIFOIn_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, eventFIFOIn_V_empty_n, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (eventFIFOIn_V_empty_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, eventFIFOIn_V_empty_n, xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, ap_block_state2_io, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (eventFIFOIn_V_empty_n = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state3_io))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, eventFIFOIn_V_empty_n)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (eventFIFOIn_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(xStreamOut_V_V_1_ack_in, tmp_reg_168, ap_predicate_op17_write_state2, yStreamOut_V_V_1_ack_in, ap_predicate_op20_write_state2, tsStreamOut_V_V_1_ack_in)
    begin
                ap_block_state2_io <= (((tmp_reg_168 = ap_const_lv1_1) and (tsStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op20_write_state2 = ap_const_boolean_1)) or ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op17_write_state2 = ap_const_boolean_1)));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in, tmp_reg_168_pp0_iter1_reg, ap_predicate_op35_write_state3, ap_predicate_op38_write_state3)
    begin
                ap_block_state3_io <= (((tmp_reg_168_pp0_iter1_reg = ap_const_lv1_1) and (tsStreamOut_V_V_1_ack_in = ap_const_logic_0)) or ((yStreamOut_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op38_write_state3 = ap_const_boolean_1)) or ((xStreamOut_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op35_write_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(xStreamOut_V_V_1_ack_in, yStreamOut_V_V_1_ack_in, tsStreamOut_V_V_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((tsStreamOut_V_V_1_ack_in = ap_const_logic_0) or (yStreamOut_V_V_1_ack_in = ap_const_logic_0) or (xStreamOut_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op17_write_state2_assign_proc : process(tmp_reg_168, tmp_2_reg_172, icmp_reg_176)
    begin
                ap_predicate_op17_write_state2 <= ((icmp_reg_176 = ap_const_lv1_1) and (tmp_2_reg_172 = ap_const_lv1_0) and (tmp_reg_168 = ap_const_lv1_0));
    end process;


    ap_predicate_op20_write_state2_assign_proc : process(tmp_reg_168, tmp_2_reg_172)
    begin
                ap_predicate_op20_write_state2 <= ((tmp_2_reg_172 = ap_const_lv1_1) and (tmp_reg_168 = ap_const_lv1_0));
    end process;


    ap_predicate_op35_write_state3_assign_proc : process(tmp_reg_168_pp0_iter1_reg, tmp_2_reg_172_pp0_iter1_reg, icmp_reg_176_pp0_iter1_reg)
    begin
                ap_predicate_op35_write_state3 <= ((icmp_reg_176_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_172_pp0_iter1_reg = ap_const_lv1_0) and (tmp_reg_168_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_predicate_op38_write_state3_assign_proc : process(tmp_reg_168_pp0_iter1_reg, tmp_2_reg_172_pp0_iter1_reg)
    begin
                ap_predicate_op38_write_state3 <= ((tmp_2_reg_172_pp0_iter1_reg = ap_const_lv1_1) and (tmp_reg_168_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    eventFIFOIn_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, eventFIFOIn_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            eventFIFOIn_V_blk_n <= eventFIFOIn_V_empty_n;
        else 
            eventFIFOIn_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    eventFIFOIn_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            eventFIFOIn_V_read <= ap_const_logic_1;
        else 
            eventFIFOIn_V_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_131_p2 <= "1" when (tmp_4_fu_121_p4 = ap_const_lv3_0) else "0";
    p_0109_0_off_fu_115_p2 <= std_logic_vector(unsigned(p_Result_5_cast_fu_105_p1) + unsigned(ap_const_lv4_E));
    p_Result_1_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_145_p1),16));
    p_Result_2_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_137_p1),16));
    p_Result_5_cast_fu_105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_95_p4),4));
    p_Result_8_fu_95_p4 <= eventFIFOIn_V_dout(14 downto 12);
    p_Result_s_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_153_p1),16));
    tmp_1_fu_153_p1 <= data_V_reg_161(15 - 1 downto 0);
    tmp_2_fu_109_p2 <= "1" when (p_Result_8_fu_95_p4 = ap_const_lv3_1) else "0";
    tmp_3_fu_145_p1 <= data_V_reg_161(12 - 1 downto 0);
    tmp_4_fu_121_p4 <= p_0109_0_off_fu_115_p2(3 downto 1);
    tmp_5_fu_137_p1 <= data_V_reg_161(12 - 1 downto 0);
    tmp_fu_87_p3 <= eventFIFOIn_V_dout(15 downto 15);
    tsStreamOut_V_V_1_ack_in <= tsStreamOut_V_V_1_state(1);
    tsStreamOut_V_V_1_ack_out <= tsStreamOut_V_V_TREADY;

    tsStreamOut_V_V_1_data_out_assign_proc : process(tsStreamOut_V_V_1_payload_A, tsStreamOut_V_V_1_payload_B, tsStreamOut_V_V_1_sel)
    begin
        if ((tsStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_B;
        else 
            tsStreamOut_V_V_1_data_out <= tsStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    tsStreamOut_V_V_1_load_A <= (tsStreamOut_V_V_1_state_cmp_full and not(tsStreamOut_V_V_1_sel_wr));
    tsStreamOut_V_V_1_load_B <= (tsStreamOut_V_V_1_state_cmp_full and tsStreamOut_V_V_1_sel_wr);
    tsStreamOut_V_V_1_sel <= tsStreamOut_V_V_1_sel_rd;
    tsStreamOut_V_V_1_state_cmp_full <= '0' when (tsStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    tsStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_reg_168, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_reg_168 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            tsStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    tsStreamOut_V_V_1_vld_out <= tsStreamOut_V_V_1_state(0);
    tsStreamOut_V_V_TDATA <= tsStreamOut_V_V_1_data_out;

    tsStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, tmp_reg_168, tmp_reg_168_pp0_iter1_reg, tsStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((tmp_reg_168 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((tmp_reg_168_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            tsStreamOut_V_V_TDATA_blk_n <= tsStreamOut_V_V_1_state(1);
        else 
            tsStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tsStreamOut_V_V_TVALID <= tsStreamOut_V_V_1_state(0);
    xStreamOut_V_V_1_ack_in <= xStreamOut_V_V_1_state(1);
    xStreamOut_V_V_1_ack_out <= xStreamOut_V_V_TREADY;

    xStreamOut_V_V_1_data_out_assign_proc : process(xStreamOut_V_V_1_payload_A, xStreamOut_V_V_1_payload_B, xStreamOut_V_V_1_sel)
    begin
        if ((xStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_B;
        else 
            xStreamOut_V_V_1_data_out <= xStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    xStreamOut_V_V_1_load_A <= (xStreamOut_V_V_1_state_cmp_full and not(xStreamOut_V_V_1_sel_wr));
    xStreamOut_V_V_1_load_B <= (xStreamOut_V_V_1_state_cmp_full and xStreamOut_V_V_1_sel_wr);
    xStreamOut_V_V_1_sel <= xStreamOut_V_V_1_sel_rd;
    xStreamOut_V_V_1_state_cmp_full <= '0' when (xStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    xStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op17_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op17_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            xStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xStreamOut_V_V_1_vld_out <= xStreamOut_V_V_1_state(0);
    xStreamOut_V_V_TDATA <= xStreamOut_V_V_1_data_out;

    xStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op17_write_state2, ap_predicate_op35_write_state3, xStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op35_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op17_write_state2 = ap_const_boolean_1)))) then 
            xStreamOut_V_V_TDATA_blk_n <= xStreamOut_V_V_1_state(1);
        else 
            xStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    xStreamOut_V_V_TVALID <= xStreamOut_V_V_1_state(0);
    yStreamOut_V_V_1_ack_in <= yStreamOut_V_V_1_state(1);
    yStreamOut_V_V_1_ack_out <= yStreamOut_V_V_TREADY;

    yStreamOut_V_V_1_data_out_assign_proc : process(yStreamOut_V_V_1_payload_A, yStreamOut_V_V_1_payload_B, yStreamOut_V_V_1_sel)
    begin
        if ((yStreamOut_V_V_1_sel = ap_const_logic_1)) then 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_B;
        else 
            yStreamOut_V_V_1_data_out <= yStreamOut_V_V_1_payload_A;
        end if; 
    end process;

    yStreamOut_V_V_1_load_A <= (yStreamOut_V_V_1_state_cmp_full and not(yStreamOut_V_V_1_sel_wr));
    yStreamOut_V_V_1_load_B <= (yStreamOut_V_V_1_state_cmp_full and yStreamOut_V_V_1_sel_wr);
    yStreamOut_V_V_1_sel <= yStreamOut_V_V_1_sel_rd;
    yStreamOut_V_V_1_state_cmp_full <= '0' when (yStreamOut_V_V_1_state = ap_const_lv2_1) else '1';

    yStreamOut_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op20_write_state2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op20_write_state2 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_1;
        else 
            yStreamOut_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    yStreamOut_V_V_1_vld_out <= yStreamOut_V_V_1_state(0);
    yStreamOut_V_V_TDATA <= yStreamOut_V_V_1_data_out;

    yStreamOut_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_predicate_op20_write_state2, ap_predicate_op38_write_state3, yStreamOut_V_V_1_state, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op20_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_predicate_op38_write_state3 = ap_const_boolean_1)))) then 
            yStreamOut_V_V_TDATA_blk_n <= yStreamOut_V_V_1_state(1);
        else 
            yStreamOut_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    yStreamOut_V_V_TVALID <= yStreamOut_V_V_1_state(0);
end behav;
