// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

/***************************** Include Files *********************************/
#include "xeventstreamtoconstencntframestream.h"

/************************** Function Implementation *************************/
#ifndef __linux__
int XEventstreamtoconstencntframestream_CfgInitialize(XEventstreamtoconstencntframestream *InstancePtr, XEventstreamtoconstencntframestream_Config *ConfigPtr) {
    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(ConfigPtr != NULL);

    InstancePtr->Config_BaseAddress = ConfigPtr->Config_BaseAddress;
    InstancePtr->IsReady = XIL_COMPONENT_IS_READY;

    return XST_SUCCESS;
}
#endif

void XEventstreamtoconstencntframestream_Start(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL) & 0x80;
    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL, Data | 0x01);
}

u32 XEventstreamtoconstencntframestream_IsDone(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL);
    return (Data >> 1) & 0x1;
}

u32 XEventstreamtoconstencntframestream_IsIdle(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL);
    return (Data >> 2) & 0x1;
}

u32 XEventstreamtoconstencntframestream_IsReady(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL);
    // check ap_start to see if the pcore is ready for next input
    return !(Data & 0x1);
}

void XEventstreamtoconstencntframestream_EnableAutoRestart(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL, 0x80);
}

void XEventstreamtoconstencntframestream_DisableAutoRestart(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_AP_CTRL, 0);
}

void XEventstreamtoconstencntframestream_Set_configRegs_V(XEventstreamtoconstencntframestream *InstancePtr, u32 Data) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_CONFIGREGS_V_DATA, Data);
}

u32 XEventstreamtoconstencntframestream_Get_configRegs_V(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_CONFIGREGS_V_DATA);
    return Data;
}

void XEventstreamtoconstencntframestream_Set_configRegEn_V(XEventstreamtoconstencntframestream *InstancePtr, u32 Data) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_CONFIGREGEN_V_DATA, Data);
}

u32 XEventstreamtoconstencntframestream_Get_configRegEn_V(XEventstreamtoconstencntframestream *InstancePtr) {
    u32 Data;

    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Data = XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_CONFIGREGEN_V_DATA);
    return Data;
}

void XEventstreamtoconstencntframestream_InterruptGlobalEnable(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_GIE, 1);
}

void XEventstreamtoconstencntframestream_InterruptGlobalDisable(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_GIE, 0);
}

void XEventstreamtoconstencntframestream_InterruptEnable(XEventstreamtoconstencntframestream *InstancePtr, u32 Mask) {
    u32 Register;

    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Register =  XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_IER);
    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_IER, Register | Mask);
}

void XEventstreamtoconstencntframestream_InterruptDisable(XEventstreamtoconstencntframestream *InstancePtr, u32 Mask) {
    u32 Register;

    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    Register =  XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_IER);
    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_IER, Register & (~Mask));
}

void XEventstreamtoconstencntframestream_InterruptClear(XEventstreamtoconstencntframestream *InstancePtr, u32 Mask) {
    Xil_AssertVoid(InstancePtr != NULL);
    Xil_AssertVoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    XEventstreamtoconstencntframestream_WriteReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_ISR, Mask);
}

u32 XEventstreamtoconstencntframestream_InterruptGetEnabled(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    return XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_IER);
}

u32 XEventstreamtoconstencntframestream_InterruptGetStatus(XEventstreamtoconstencntframestream *InstancePtr) {
    Xil_AssertNonvoid(InstancePtr != NULL);
    Xil_AssertNonvoid(InstancePtr->IsReady == XIL_COMPONENT_IS_READY);

    return XEventstreamtoconstencntframestream_ReadReg(InstancePtr->Config_BaseAddress, XEVENTSTREAMTOCONSTENCNTFRAMESTREAM_CONFIG_ADDR_ISR);
}

